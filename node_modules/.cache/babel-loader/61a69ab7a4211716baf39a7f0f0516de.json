{"ast":null,"code":"/*!\n * FilePondPluginFileValidateSize 2.2.1\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginFileValidateSize = factory());\n})(this, function () {\n  'use strict';\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils; // get quick reference to Type utils\n\n    var Type = utils.Type,\n        replaceInString = utils.replaceInString,\n        toNaturalFileSize = utils.toNaturalFileSize; // filtering if an item is allowed in hopper\n\n    addFilter('ALLOW_HOPPER_ITEM', function (file, _ref2) {\n      var query = _ref2.query;\n\n      if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n        return true;\n      }\n\n      var sizeMax = query('GET_MAX_FILE_SIZE');\n\n      if (sizeMax !== null && file.size >= sizeMax) {\n        return false;\n      }\n\n      var sizeMin = query('GET_MIN_FILE_SIZE');\n\n      if (sizeMin !== null && file.size <= sizeMin) {\n        return false;\n      }\n\n      return true;\n    }); // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n\n    addFilter('LOAD_FILE', function (file, _ref3) {\n      var query = _ref3.query;\n      return new Promise(function (resolve, reject) {\n        // if not allowed, all fine, exit\n        if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n          return resolve(file);\n        } // check if file should be filtered\n\n\n        var fileFilter = query('GET_FILE_VALIDATE_SIZE_FILTER');\n\n        if (fileFilter && !fileFilter(file)) {\n          return resolve(file);\n        } // reject or resolve based on file size\n\n\n        var sizeMax = query('GET_MAX_FILE_SIZE');\n\n        if (sizeMax !== null && file.size >= sizeMax) {\n          reject({\n            status: {\n              main: query('GET_LABEL_MAX_FILE_SIZE_EXCEEDED'),\n              sub: replaceInString(query('GET_LABEL_MAX_FILE_SIZE'), {\n                filesize: toNaturalFileSize(sizeMax)\n              })\n            }\n          });\n          return;\n        } // reject or resolve based on file size\n\n\n        var sizeMin = query('GET_MIN_FILE_SIZE');\n\n        if (sizeMin !== null && file.size <= sizeMin) {\n          reject({\n            status: {\n              main: query('GET_LABEL_MIN_FILE_SIZE_EXCEEDED'),\n              sub: replaceInString(query('GET_LABEL_MIN_FILE_SIZE'), {\n                filesize: toNaturalFileSize(sizeMin)\n              })\n            }\n          });\n          return;\n        } // returns the current option value\n\n\n        var totalSizeMax = query('GET_MAX_TOTAL_FILE_SIZE');\n\n        if (totalSizeMax !== null) {\n          // get the current total file size\n          var currentTotalSize = query('GET_ACTIVE_ITEMS').reduce(function (total, item) {\n            return total + item.fileSize;\n          }, 0); // get the size of the new file\n\n          if (currentTotalSize > totalSizeMax) {\n            reject({\n              status: {\n                main: query('GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED'),\n                sub: replaceInString(query('GET_LABEL_MAX_TOTAL_FILE_SIZE'), {\n                  filesize: toNaturalFileSize(totalSizeMax)\n                })\n              }\n            });\n            return;\n          }\n        } // file is fine, let's pass it back\n\n\n        resolve(file);\n      });\n    });\n    return {\n      options: {\n        // Enable or disable file type validation\n        allowFileSizeValidation: [true, Type.BOOLEAN],\n        // Max individual file size in bytes\n        maxFileSize: [null, Type.INT],\n        // Min individual file size in bytes\n        minFileSize: [null, Type.INT],\n        // Max total file size in bytes\n        maxTotalFileSize: [null, Type.INT],\n        // Filter the files that need to be validated for size\n        fileValidateSizeFilter: [null, Type.FUNCTION],\n        // error labels\n        labelMinFileSizeExceeded: ['File is too small', Type.STRING],\n        labelMinFileSize: ['Minimum file size is {filesize}', Type.STRING],\n        labelMaxFileSizeExceeded: ['File is too large', Type.STRING],\n        labelMaxFileSize: ['Maximum file size is {filesize}', Type.STRING],\n        labelMaxTotalFileSizeExceeded: ['Maximum total size exceeded', Type.STRING],\n        labelMaxTotalFileSize: ['Maximum total file size is {filesize}', Type.STRING]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":{"version":3,"sources":["/Users/aseshres/Desktop/babybook/babybook-fe/babybook-ui/node_modules/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js"],"names":["global","factory","exports","module","define","amd","self","FilePondPluginFileValidateSize","plugin","_ref","addFilter","utils","Type","replaceInString","toNaturalFileSize","file","_ref2","query","sizeMax","size","sizeMin","_ref3","Promise","resolve","reject","fileFilter","status","main","sub","filesize","totalSizeMax","currentTotalSize","reduce","total","item","fileSize","options","allowFileSizeValidation","BOOLEAN","maxFileSize","INT","minFileSize","maxTotalFileSize","fileValidateSizeFilter","FUNCTION","labelMinFileSizeExceeded","STRING","labelMinFileSize","labelMaxFileSizeExceeded","labelMaxFileSize","labelMaxTotalFileSizeExceeded","labelMaxTotalFileSize","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"mappings":"AAAA;;;;;;AAMA;AAEA,CAAC,UAASA,MAAT,EAAiBC,OAAjB,EAA0B;AACzB,SAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GACKA,MAAM,CAACD,OAAP,GAAiBD,OAAO,EAD7B,GAEI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GACAD,MAAM,CAACH,OAAD,CADN,IAEED,MAAM,GAAGA,MAAM,IAAIM,IAApB,EACAN,MAAM,CAACO,8BAAP,GAAwCN,OAAO,EAHhD,CAFJ;AAMD,CAPD,EAOG,IAPH,EAOS,YAAW;AAClB;;AAEA,MAAIO,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACjC,QAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,QACEC,KAAK,GAAGF,IAAI,CAACE,KADf,CADiC,CAGjC;;AACA,QAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,QACEC,eAAe,GAAGF,KAAK,CAACE,eAD1B;AAAA,QAEEC,iBAAiB,GAAGH,KAAK,CAACG,iBAF5B,CAJiC,CAQjC;;AACAJ,IAAAA,SAAS,CAAC,mBAAD,EAAsB,UAASK,IAAT,EAAeC,KAAf,EAAsB;AACnD,UAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;;AACA,UAAI,CAACA,KAAK,CAAC,gCAAD,CAAV,EAA8C;AAC5C,eAAO,IAAP;AACD;;AAED,UAAIC,OAAO,GAAGD,KAAK,CAAC,mBAAD,CAAnB;;AACA,UAAIC,OAAO,KAAK,IAAZ,IAAoBH,IAAI,CAACI,IAAL,IAAaD,OAArC,EAA8C;AAC5C,eAAO,KAAP;AACD;;AAED,UAAIE,OAAO,GAAGH,KAAK,CAAC,mBAAD,CAAnB;;AACA,UAAIG,OAAO,KAAK,IAAZ,IAAoBL,IAAI,CAACI,IAAL,IAAaC,OAArC,EAA8C;AAC5C,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD,KAjBQ,CAAT,CATiC,CA4BjC;AACA;AACA;;AACAV,IAAAA,SAAS,CAAC,WAAD,EAAc,UAASK,IAAT,EAAeM,KAAf,EAAsB;AAC3C,UAAIJ,KAAK,GAAGI,KAAK,CAACJ,KAAlB;AACA,aAAO,IAAIK,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C;AACA,YAAI,CAACP,KAAK,CAAC,gCAAD,CAAV,EAA8C;AAC5C,iBAAOM,OAAO,CAACR,IAAD,CAAd;AACD,SAJ0C,CAM3C;;;AACA,YAAIU,UAAU,GAAGR,KAAK,CAAC,+BAAD,CAAtB;;AACA,YAAIQ,UAAU,IAAI,CAACA,UAAU,CAACV,IAAD,CAA7B,EAAqC;AACnC,iBAAOQ,OAAO,CAACR,IAAD,CAAd;AACD,SAV0C,CAY3C;;;AACA,YAAIG,OAAO,GAAGD,KAAK,CAAC,mBAAD,CAAnB;;AACA,YAAIC,OAAO,KAAK,IAAZ,IAAoBH,IAAI,CAACI,IAAL,IAAaD,OAArC,EAA8C;AAC5CM,UAAAA,MAAM,CAAC;AACLE,YAAAA,MAAM,EAAE;AACNC,cAAAA,IAAI,EAAEV,KAAK,CAAC,kCAAD,CADL;AAENW,cAAAA,GAAG,EAAEf,eAAe,CAACI,KAAK,CAAC,yBAAD,CAAN,EAAmC;AACrDY,gBAAAA,QAAQ,EAAEf,iBAAiB,CAACI,OAAD;AAD0B,eAAnC;AAFd;AADH,WAAD,CAAN;AASA;AACD,SAzB0C,CA2B3C;;;AACA,YAAIE,OAAO,GAAGH,KAAK,CAAC,mBAAD,CAAnB;;AACA,YAAIG,OAAO,KAAK,IAAZ,IAAoBL,IAAI,CAACI,IAAL,IAAaC,OAArC,EAA8C;AAC5CI,UAAAA,MAAM,CAAC;AACLE,YAAAA,MAAM,EAAE;AACNC,cAAAA,IAAI,EAAEV,KAAK,CAAC,kCAAD,CADL;AAENW,cAAAA,GAAG,EAAEf,eAAe,CAACI,KAAK,CAAC,yBAAD,CAAN,EAAmC;AACrDY,gBAAAA,QAAQ,EAAEf,iBAAiB,CAACM,OAAD;AAD0B,eAAnC;AAFd;AADH,WAAD,CAAN;AASA;AACD,SAxC0C,CA0C3C;;;AACA,YAAIU,YAAY,GAAGb,KAAK,CAAC,yBAAD,CAAxB;;AACA,YAAIa,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,cAAIC,gBAAgB,GAAGd,KAAK,CAAC,kBAAD,CAAL,CAA0Be,MAA1B,CAAiC,UACtDC,KADsD,EAEtDC,IAFsD,EAGtD;AACA,mBAAOD,KAAK,GAAGC,IAAI,CAACC,QAApB;AACD,WALsB,EAMvB,CANuB,CAAvB,CAFyB,CAUzB;;AACA,cAAIJ,gBAAgB,GAAGD,YAAvB,EAAqC;AACnCN,YAAAA,MAAM,CAAC;AACLE,cAAAA,MAAM,EAAE;AACNC,gBAAAA,IAAI,EAAEV,KAAK,CAAC,wCAAD,CADL;AAGNW,gBAAAA,GAAG,EAAEf,eAAe,CAACI,KAAK,CAAC,+BAAD,CAAN,EAAyC;AAC3DY,kBAAAA,QAAQ,EAAEf,iBAAiB,CAACgB,YAAD;AADgC,iBAAzC;AAHd;AADH,aAAD,CAAN;AAUA;AACD;AACF,SApE0C,CAsE3C;;;AACAP,QAAAA,OAAO,CAACR,IAAD,CAAP;AACD,OAxEM,CAAP;AAyED,KA3EQ,CAAT;AA6EA,WAAO;AACLqB,MAAAA,OAAO,EAAE;AACP;AACAC,QAAAA,uBAAuB,EAAE,CAAC,IAAD,EAAOzB,IAAI,CAAC0B,OAAZ,CAFlB;AAIP;AACAC,QAAAA,WAAW,EAAE,CAAC,IAAD,EAAO3B,IAAI,CAAC4B,GAAZ,CALN;AAOP;AACAC,QAAAA,WAAW,EAAE,CAAC,IAAD,EAAO7B,IAAI,CAAC4B,GAAZ,CARN;AAUP;AACAE,QAAAA,gBAAgB,EAAE,CAAC,IAAD,EAAO9B,IAAI,CAAC4B,GAAZ,CAXX;AAaP;AACAG,QAAAA,sBAAsB,EAAE,CAAC,IAAD,EAAO/B,IAAI,CAACgC,QAAZ,CAdjB;AAgBP;AACAC,QAAAA,wBAAwB,EAAE,CAAC,mBAAD,EAAsBjC,IAAI,CAACkC,MAA3B,CAjBnB;AAkBPC,QAAAA,gBAAgB,EAAE,CAAC,iCAAD,EAAoCnC,IAAI,CAACkC,MAAzC,CAlBX;AAoBPE,QAAAA,wBAAwB,EAAE,CAAC,mBAAD,EAAsBpC,IAAI,CAACkC,MAA3B,CApBnB;AAqBPG,QAAAA,gBAAgB,EAAE,CAAC,iCAAD,EAAoCrC,IAAI,CAACkC,MAAzC,CArBX;AAuBPI,QAAAA,6BAA6B,EAAE,CAC7B,6BAD6B,EAE7BtC,IAAI,CAACkC,MAFwB,CAvBxB;AA4BPK,QAAAA,qBAAqB,EAAE,CACrB,uCADqB,EAErBvC,IAAI,CAACkC,MAFgB;AA5BhB;AADJ,KAAP;AAmCD,GA/ID,CAHkB,CAoJlB;;;AACA,MAAIM,SAAS,GACX,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAD9D;;AAEA,MAAIF,SAAJ,EAAe;AACbE,IAAAA,QAAQ,CAACC,aAAT,CACE,IAAIC,WAAJ,CAAgB,uBAAhB,EAAyC;AAAEC,MAAAA,MAAM,EAAEjD;AAAV,KAAzC,CADF;AAGD;;AAED,SAAOA,MAAP;AACD,CArKD","sourcesContent":["/*!\n * FilePondPluginFileValidateSize 2.2.1\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined'\n    ? (module.exports = factory())\n    : typeof define === 'function' && define.amd\n    ? define(factory)\n    : ((global = global || self),\n      (global.FilePondPluginFileValidateSize = factory()));\n})(this, function() {\n  'use strict';\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n      utils = _ref.utils;\n    // get quick reference to Type utils\n    var Type = utils.Type,\n      replaceInString = utils.replaceInString,\n      toNaturalFileSize = utils.toNaturalFileSize;\n\n    // filtering if an item is allowed in hopper\n    addFilter('ALLOW_HOPPER_ITEM', function(file, _ref2) {\n      var query = _ref2.query;\n      if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n        return true;\n      }\n\n      var sizeMax = query('GET_MAX_FILE_SIZE');\n      if (sizeMax !== null && file.size >= sizeMax) {\n        return false;\n      }\n\n      var sizeMin = query('GET_MIN_FILE_SIZE');\n      if (sizeMin !== null && file.size <= sizeMin) {\n        return false;\n      }\n\n      return true;\n    });\n\n    // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n    addFilter('LOAD_FILE', function(file, _ref3) {\n      var query = _ref3.query;\n      return new Promise(function(resolve, reject) {\n        // if not allowed, all fine, exit\n        if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n          return resolve(file);\n        }\n\n        // check if file should be filtered\n        var fileFilter = query('GET_FILE_VALIDATE_SIZE_FILTER');\n        if (fileFilter && !fileFilter(file)) {\n          return resolve(file);\n        }\n\n        // reject or resolve based on file size\n        var sizeMax = query('GET_MAX_FILE_SIZE');\n        if (sizeMax !== null && file.size >= sizeMax) {\n          reject({\n            status: {\n              main: query('GET_LABEL_MAX_FILE_SIZE_EXCEEDED'),\n              sub: replaceInString(query('GET_LABEL_MAX_FILE_SIZE'), {\n                filesize: toNaturalFileSize(sizeMax)\n              })\n            }\n          });\n\n          return;\n        }\n\n        // reject or resolve based on file size\n        var sizeMin = query('GET_MIN_FILE_SIZE');\n        if (sizeMin !== null && file.size <= sizeMin) {\n          reject({\n            status: {\n              main: query('GET_LABEL_MIN_FILE_SIZE_EXCEEDED'),\n              sub: replaceInString(query('GET_LABEL_MIN_FILE_SIZE'), {\n                filesize: toNaturalFileSize(sizeMin)\n              })\n            }\n          });\n\n          return;\n        }\n\n        // returns the current option value\n        var totalSizeMax = query('GET_MAX_TOTAL_FILE_SIZE');\n        if (totalSizeMax !== null) {\n          // get the current total file size\n          var currentTotalSize = query('GET_ACTIVE_ITEMS').reduce(function(\n            total,\n            item\n          ) {\n            return total + item.fileSize;\n          },\n          0);\n\n          // get the size of the new file\n          if (currentTotalSize > totalSizeMax) {\n            reject({\n              status: {\n                main: query('GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED'),\n\n                sub: replaceInString(query('GET_LABEL_MAX_TOTAL_FILE_SIZE'), {\n                  filesize: toNaturalFileSize(totalSizeMax)\n                })\n              }\n            });\n\n            return;\n          }\n        }\n\n        // file is fine, let's pass it back\n        resolve(file);\n      });\n    });\n\n    return {\n      options: {\n        // Enable or disable file type validation\n        allowFileSizeValidation: [true, Type.BOOLEAN],\n\n        // Max individual file size in bytes\n        maxFileSize: [null, Type.INT],\n\n        // Min individual file size in bytes\n        minFileSize: [null, Type.INT],\n\n        // Max total file size in bytes\n        maxTotalFileSize: [null, Type.INT],\n\n        // Filter the files that need to be validated for size\n        fileValidateSizeFilter: [null, Type.FUNCTION],\n\n        // error labels\n        labelMinFileSizeExceeded: ['File is too small', Type.STRING],\n        labelMinFileSize: ['Minimum file size is {filesize}', Type.STRING],\n\n        labelMaxFileSizeExceeded: ['File is too large', Type.STRING],\n        labelMaxFileSize: ['Maximum file size is {filesize}', Type.STRING],\n\n        labelMaxTotalFileSizeExceeded: [\n          'Maximum total size exceeded',\n          Type.STRING\n        ],\n\n        labelMaxTotalFileSize: [\n          'Maximum total file size is {filesize}',\n          Type.STRING\n        ]\n      }\n    };\n  };\n\n  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n  var isBrowser =\n    typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  if (isBrowser) {\n    document.dispatchEvent(\n      new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n    );\n  }\n\n  return plugin;\n});\n"]},"metadata":{},"sourceType":"script"}